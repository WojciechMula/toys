#include <cstdint>
#include <cstdio>
#include <thread>
#include <chrono>
#include <atomic>
#include <set>
#include <vector>

using namespace std::chrono_literals;

constexpr uint32_t codes[] = {

    97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
    112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 181, 223, 224, 225,
    226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240,
    241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257,
    259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287,
    289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 314, 316, 318,
    320, 322, 324, 326, 328, 329, 331, 333, 335, 337, 339, 341, 343, 345, 347,
    349, 351, 353, 355, 357, 359, 361, 363, 365, 367, 369, 371, 373, 375, 378,
    380, 382, 383, 384, 387, 389, 392, 396, 402, 405, 409, 410, 414, 417, 419,
    421, 424, 429, 432, 436, 438, 441, 445, 447, 453, 454, 456, 457, 459, 460,
    462, 464, 466, 468, 470, 472, 474, 476, 477, 479, 481, 483, 485, 487, 489,
    491, 493, 495, 496, 498, 499, 501, 505, 507, 509, 511, 513, 515, 517, 519,
    521, 523, 525, 527, 529, 531, 533, 535, 537, 539, 541, 543, 547, 549, 551,
    553, 555, 557, 559, 561, 563, 572, 575, 576, 578, 583, 585, 587, 589, 591,
    592, 593, 594, 595, 596, 598, 599, 601, 603, 604, 608, 609, 611, 613, 614,
    616, 617, 618, 619, 620, 623, 625, 626, 629, 637, 640, 642, 643, 647, 648,
    649, 650, 651, 652, 658, 669, 670, 837, 881, 883, 887, 891, 892, 893, 912,
    940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954,
    955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
    970, 971, 972, 973, 974, 976, 977, 981, 982, 983, 985, 987, 989, 991, 993,
    995, 997, 999, 1001, 1003, 1005, 1007, 1008, 1009, 1010, 1011, 1013, 1016,
    1019, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082,
    1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
    1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106,
    1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118,
    1119, 1121, 1123, 1125, 1127, 1129, 1131, 1133, 1135, 1137, 1139, 1141,
    1143, 1145, 1147, 1149, 1151, 1153, 1163, 1165, 1167, 1169, 1171, 1173,
    1175, 1177, 1179, 1181, 1183, 1185, 1187, 1189, 1191, 1193, 1195, 1197,
    1199, 1201, 1203, 1205, 1207, 1209, 1211, 1213, 1215, 1218, 1220, 1222,
    1224, 1226, 1228, 1230, 1231, 1233, 1235, 1237, 1239, 1241, 1243, 1245,
    1247, 1249, 1251, 1253, 1255, 1257, 1259, 1261, 1263, 1265, 1267, 1269,
    1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285, 1287, 1289, 1291, 1293,
    1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317,
    1319, 1321, 1323, 1325, 1327, 1377, 1378, 1379, 1380, 1381, 1382, 1383,
    1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395,
    1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
    1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 4304, 4305, 4306, 4307,
    4308, 4309, 4310, 4311, 4312, 4313, 4314, 4315, 4316, 4317, 4318, 4319,
    4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331,
    4332, 4333, 4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342, 4343,
    4344, 4345, 4346, 4349, 4350, 4351, 5112, 5113, 5114, 5115, 5116, 5117,
    7296, 7297, 7298, 7299, 7300, 7301, 7302, 7303, 7304, 7545, 7549, 7566,
    7681, 7683, 7685, 7687, 7689, 7691, 7693, 7695, 7697, 7699, 7701, 7703,
    7705, 7707, 7709, 7711, 7713, 7715, 7717, 7719, 7721, 7723, 7725, 7727,
    7729, 7731, 7733, 7735, 7737, 7739, 7741, 7743, 7745, 7747, 7749, 7751,
    7753, 7755, 7757, 7759, 7761, 7763, 7765, 7767, 7769, 7771, 7773, 7775,
    7777, 7779, 7781, 7783, 7785, 7787, 7789, 7791, 7793, 7795, 7797, 7799,
    7801, 7803, 7805, 7807, 7809, 7811, 7813, 7815, 7817, 7819, 7821, 7823,
    7825, 7827, 7829, 7830, 7831, 7832, 7833, 7834, 7835, 7841, 7843, 7845,
    7847, 7849, 7851, 7853, 7855, 7857, 7859, 7861, 7863, 7865, 7867, 7869,
    7871, 7873, 7875, 7877, 7879, 7881, 7883, 7885, 7887, 7889, 7891, 7893,
    7895, 7897, 7899, 7901, 7903, 7905, 7907, 7909, 7911, 7913, 7915, 7917,
    7919, 7921, 7923, 7925, 7927, 7929, 7931, 7933, 7935, 7936, 7937, 7938,
    7939, 7940, 7941, 7942, 7943, 7952, 7953, 7954, 7955, 7956, 7957, 7968,
    7969, 7970, 7971, 7972, 7973, 7974, 7975, 7984, 7985, 7986, 7987, 7988,
    7989, 7990, 7991, 8000, 8001, 8002, 8003, 8004, 8005, 8016, 8017, 8018,
    8019, 8020, 8021, 8022, 8023, 8032, 8033, 8034, 8035, 8036, 8037, 8038,
    8039, 8048, 8049, 8050, 8051, 8052, 8053, 8054, 8055, 8056, 8057, 8058,
    8059, 8060, 8061, 8064, 8065, 8066, 8067, 8068, 8069, 8070, 8071, 8072,
    8073, 8074, 8075, 8076, 8077, 8078, 8079, 8080, 8081, 8082, 8083, 8084,
    8085, 8086, 8087, 8088, 8089, 8090, 8091, 8092, 8093, 8094, 8095, 8096,
    8097, 8098, 8099, 8100, 8101, 8102, 8103, 8104, 8105, 8106, 8107, 8108,
    8109, 8110, 8111, 8112, 8113, 8114, 8115, 8116, 8118, 8119, 8124, 8126,
    8130, 8131, 8132, 8134, 8135, 8140, 8144, 8145, 8146, 8147, 8150, 8151,
    8160, 8161, 8162, 8163, 8164, 8165, 8166, 8167, 8178, 8179, 8180, 8182,
    8183, 8188, 8526, 8560, 8561, 8562, 8563, 8564, 8565, 8566, 8567, 8568,
    8569, 8570, 8571, 8572, 8573, 8574, 8575, 8580, 9424, 9425, 9426, 9427,
    9428, 9429, 9430, 9431, 9432, 9433, 9434, 9435, 9436, 9437, 9438, 9439,
    9440, 9441, 9442, 9443, 9444, 9445, 9446, 9447, 9448, 9449, 11312, 11313,
    11314, 11315, 11316, 11317, 11318, 11319, 11320, 11321, 11322, 11323,
    11324, 11325, 11326, 11327, 11328, 11329, 11330, 11331, 11332, 11333,
    11334, 11335, 11336, 11337, 11338, 11339, 11340, 11341, 11342, 11343,
    11344, 11345, 11346, 11347, 11348, 11349, 11350, 11351, 11352, 11353,
    11354, 11355, 11356, 11357, 11358, 11359, 11361, 11365, 11366, 11368,
    11370, 11372, 11379, 11382, 11393, 11395, 11397, 11399, 11401, 11403,
    11405, 11407, 11409, 11411, 11413, 11415, 11417, 11419, 11421, 11423,
    11425, 11427, 11429, 11431, 11433, 11435, 11437, 11439, 11441, 11443,
    11445, 11447, 11449, 11451, 11453, 11455, 11457, 11459, 11461, 11463,
    11465, 11467, 11469, 11471, 11473, 11475, 11477, 11479, 11481, 11483,
    11485, 11487, 11489, 11491, 11500, 11502, 11507, 11520, 11521, 11522,
    11523, 11524, 11525, 11526, 11527, 11528, 11529, 11530, 11531, 11532,
    11533, 11534, 11535, 11536, 11537, 11538, 11539, 11540, 11541, 11542,
    11543, 11544, 11545, 11546, 11547, 11548, 11549, 11550, 11551, 11552,
    11553, 11554, 11555, 11556, 11557, 11559, 11565, 42561, 42563, 42565,
    42567, 42569, 42571, 42573, 42575, 42577, 42579, 42581, 42583, 42585,
    42587, 42589, 42591, 42593, 42595, 42597, 42599, 42601, 42603, 42605,
    42625, 42627, 42629, 42631, 42633, 42635, 42637, 42639, 42641, 42643,
    42645, 42647, 42649, 42651, 42787, 42789, 42791, 42793, 42795, 42797,
    42799, 42803, 42805, 42807, 42809, 42811, 42813, 42815, 42817, 42819,
    42821, 42823, 42825, 42827, 42829, 42831, 42833, 42835, 42837, 42839,
    42841, 42843, 42845, 42847, 42849, 42851, 42853, 42855, 42857, 42859,
    42861, 42863, 42874, 42876, 42879, 42881, 42883, 42885, 42887, 42892,
    42897, 42899, 42900, 42903, 42905, 42907, 42909, 42911, 42913, 42915,
    42917, 42919, 42921, 42933, 42935, 42937, 42939, 42941, 42943, 42945,
    42947, 42952, 42954, 42961, 42967, 42969, 42998, 43859, 43888, 43889,
    43890, 43891, 43892, 43893, 43894, 43895, 43896, 43897, 43898, 43899,
    43900, 43901, 43902, 43903, 43904, 43905, 43906, 43907, 43908, 43909,
    43910, 43911, 43912, 43913, 43914, 43915, 43916, 43917, 43918, 43919,
    43920, 43921, 43922, 43923, 43924, 43925, 43926, 43927, 43928, 43929,
    43930, 43931, 43932, 43933, 43934, 43935, 43936, 43937, 43938, 43939,
    43940, 43941, 43942, 43943, 43944, 43945, 43946, 43947, 43948, 43949,
    43950, 43951, 43952, 43953, 43954, 43955, 43956, 43957, 43958, 43959,
    43960, 43961, 43962, 43963, 43964, 43965, 43966, 43967, 64256, 64257,
    64258, 64259, 64260, 64261, 64262, 64275, 64276, 64277, 64278, 64279,
    65345, 65346, 65347, 65348, 65349, 65350, 65351, 65352, 65353, 65354,
    65355, 65356, 65357, 65358, 65359, 65360, 65361, 65362, 65363, 65364,
    65365, 65366, 65367, 65368, 65369, 65370, 66600, 66601, 66602, 66603,
    66604, 66605, 66606, 66607, 66608, 66609, 66610, 66611, 66612, 66613,
    66614, 66615, 66616, 66617, 66618, 66619, 66620, 66621, 66622, 66623,
    66624, 66625, 66626, 66627, 66628, 66629, 66630, 66631, 66632, 66633,
    66634, 66635, 66636, 66637, 66638, 66639, 66776, 66777, 66778, 66779,
    66780, 66781, 66782, 66783, 66784, 66785, 66786, 66787, 66788, 66789,
    66790, 66791, 66792, 66793, 66794, 66795, 66796, 66797, 66798, 66799,
    66800, 66801, 66802, 66803, 66804, 66805, 66806, 66807, 66808, 66809,
    66810, 66811, 66967, 66968, 66969, 66970, 66971, 66972, 66973, 66974,
    66975, 66976, 66977, 66979, 66980, 66981, 66982, 66983, 66984, 66985,
    66986, 66987, 66988, 66989, 66990, 66991, 66992, 66993, 66995, 66996,
    66997, 66998, 66999, 67000, 67001, 67003, 67004, 68800, 68801, 68802,
    68803, 68804, 68805, 68806, 68807, 68808, 68809, 68810, 68811, 68812,
    68813, 68814, 68815, 68816, 68817, 68818, 68819, 68820, 68821, 68822,
    68823, 68824, 68825, 68826, 68827, 68828, 68829, 68830, 68831, 68832,
    68833, 68834, 68835, 68836, 68837, 68838, 68839, 68840, 68841, 68842,
    68843, 68844, 68845, 68846, 68847, 68848, 68849, 68850, 71872, 71873,
    71874, 71875, 71876, 71877, 71878, 71879, 71880, 71881, 71882, 71883,
    71884, 71885, 71886, 71887, 71888, 71889, 71890, 71891, 71892, 71893,
    71894, 71895, 71896, 71897, 71898, 71899, 71900, 71901, 71902, 71903,
    93792, 93793, 93794, 93795, 93796, 93797, 93798, 93799, 93800, 93801,
    93802, 93803, 93804, 93805, 93806, 93807, 93808, 93809, 93810, 93811,
    93812, 93813, 93814, 93815, 93816, 93817, 93818, 93819, 93820, 93821,
    93822, 93823, 125218, 125219, 125220, 125221, 125222, 125223, 125224,
    125225, 125226, 125227, 125228, 125229, 125230, 125231, 125232, 125233,
    125234, 125235, 125236, 125237, 125238, 125239, 125240, 125241, 125242,
    125243, 125244, 125245, 125246, 125247, 125248, 125249, 125250, 125251,
};

std::atomic<size_t> total_count;

bool check_array(uint32_t magic, uint32_t shift, uint32_t mask, uint32_t& max_code) {
    std::set<uint32_t> set;

    for (size_t i=0; i < 1525; i++) {
        const uint32_t hash = ((magic * codes[i]) >> shift) & mask;
        if (not set.insert(hash).second) {
            return false;
        }
    }

    auto it = --set.end();
    max_code = *it;

    return true;
}

void check(const std::vector<uint32_t>& values, size_t start, size_t end) {
    size_t best_max_code = -1;
    for (uint32_t i=start; i < end; i++) {
        const uint32_t mult = values[i];
        for (uint32_t shift=0; shift < 32; shift++) {
            for (uint32_t b=8; b < 16; b++) {
                const uint32_t mask = (1 << b) - 1;

                uint32_t max_code = 0;
                if (not check_array(mult, shift, mask, max_code)) {
                    continue;
                }

                if (max_code < best_max_code) {
                    printf("entries %u mult %x shift %d mask %x\n",
                        max_code,
                        mult,
                        shift,
                        mask
                    );

                    best_max_code = max_code;
                }
            }
        }

        total_count.fetch_sub(1);
    }
}

int main() {
    const size_t THREADS = 12;
    std::vector<uint32_t> mult;

    for (int b0=0; b0 < 32; b0++) {
    for (int b1=b0+1; b1 < 32; b1++) {
    for (int b2=b1+1; b2 < 32; b2++) {
    for (int b3=b2+1; b3 < 32; b3++) {
    for (int b4=b3+1; b4 < 32; b4++) {
    for (int b5=b4+1; b5 < 32; b5++) {
    for (int b6=b4+1; b6 < 32; b6++) {
        const uint32_t v = 0
            | (1 << b0)
            | (1 << b1)
            | (1 << b2)
            | (1 << b3)
            | (1 << b4)
            | (1 << b5)
        ;

        mult.push_back(v);
    }}}}}}}

    std::vector<std::thread> threads;

    total_count = mult.size();
    const size_t n = mult.size() / THREADS;

    for (size_t i=0; i < THREADS; i++) {
        const size_t start = i * n;
        size_t end = start + n;

        if (end > mult.size()) {
            end = mult.size();
        }
        threads.push_back(std::thread(check, mult, start, end));
    }

    const size_t k = mult.size();
    while (true) {
        const size_t curr = total_count;
        if (curr == 0) {
            break;
        }

        const double perc = 100.0 * curr / double(k);
        
        printf("progress %0.3f%%\n", perc);
        std::this_thread::sleep_for(2000ms);
    }

    for (auto& th: threads) {
        th.join();
    }
}
