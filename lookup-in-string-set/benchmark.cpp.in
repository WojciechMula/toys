#include "generated/hash_ada-pred.cpp"
#include "generated/hash_ada-res.cpp"
#include "generated/hash_ada.cpp"
#include "generated/hash_adadefs.cpp"
#include "generated/hash_c.cpp"
#include "generated/hash_countries.cpp"
#include "generated/hash_cplusplus.cpp"
#include "generated/hash_cpp.cpp"
#include "generated/hash_go.cpp"
#include "generated/hash_gpc.cpp"
#include "generated/hash_irc.cpp"
#include "generated/hash_java.cpp"
#include "generated/hash_jscript.cpp"
#include "generated/hash_modula.cpp"
#include "generated/hash_modula2.cpp"
#include "generated/hash_modula3.cpp"
#include "generated/hash_pascal.cpp"
#include "generated/hash_sneller.cpp"
#include "generated/hash_snellerbuiltin.cpp"
#include "generated/hash_states.cpp"
#include "generated/pext_ada-pred.cpp"
#include "generated/pext_ada-res.cpp"
#include "generated/pext_ada.cpp"
#include "generated/pext_adadefs.cpp"
#include "generated/pext_c.cpp"
#include "generated/pext_countries.cpp"
#include "generated/pext_cplusplus.cpp"
#include "generated/pext_cpp.cpp"
#include "generated/pext_go.cpp"
#include "generated/pext_gpc.cpp"
#include "generated/pext_irc.cpp"
#include "generated/pext_java.cpp"
#include "generated/pext_jscript.cpp"
#include "generated/pext_modula.cpp"
#include "generated/pext_modula2.cpp"
#include "generated/pext_modula3.cpp"
#include "generated/pext_pascal.cpp"
#include "generated/pext_sneller.cpp"
#include "generated/pext_snellerbuiltin.cpp"
#include "generated/pext_states.cpp"
#include "generated/split_ada-pred.cpp"
#include "generated/split_ada-res.cpp"
#include "generated/split_ada.cpp"
#include "generated/split_adadefs.cpp"
#include "generated/split_c.cpp"
#include "generated/split_countries.cpp"
#include "generated/split_cplusplus.cpp"
#include "generated/split_cpp.cpp"
#include "generated/split_go.cpp"
#include "generated/split_gpc.cpp"
#include "generated/split_irc.cpp"
#include "generated/split_java.cpp"
#include "generated/split_jscript.cpp"
#include "generated/split_modula.cpp"
#include "generated/split_modula2.cpp"
#include "generated/split_modula3.cpp"
#include "generated/split_pascal.cpp"
#include "generated/split_sneller.cpp"
#include "generated/split_snellerbuiltin.cpp"
#include "generated/split_states.cpp"

void benchmark_ada(const Filter& filter) {
    if (!filter.dataset("ada")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/ada_1M_000perc.txt");
    printf("benchmark for testdata/ada_1M_000perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_split", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/ada_1M_010perc.txt");
    printf("benchmark for testdata/ada_1M_010perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_split", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/ada_1M_025perc.txt");
    printf("benchmark for testdata/ada_1M_025perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_split", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/ada_1M_050perc.txt");
    printf("benchmark for testdata/ada_1M_050perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_split", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/ada_1M_075perc.txt");
    printf("benchmark for testdata/ada_1M_075perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_split", repeat, testdata.size());
    }
}

void benchmark_ada_pred(const Filter& filter) {
    if (!filter.dataset("ada-pred")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/ada-pred_1M_000perc.txt");
    printf("benchmark for testdata/ada-pred_1M_000perc.txt\n");
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_split", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/ada-pred_1M_010perc.txt");
    printf("benchmark for testdata/ada-pred_1M_010perc.txt\n");
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_split", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/ada-pred_1M_025perc.txt");
    printf("benchmark for testdata/ada-pred_1M_025perc.txt\n");
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_split", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/ada-pred_1M_050perc.txt");
    printf("benchmark for testdata/ada-pred_1M_050perc.txt\n");
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_split", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/ada-pred_1M_075perc.txt");
    printf("benchmark for testdata/ada-pred_1M_075perc.txt\n");
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_pred_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_pred_split", repeat, testdata.size());
    }
}

void benchmark_ada_res(const Filter& filter) {
    if (!filter.dataset("ada-res")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/ada-res_1M_000perc.txt");
    printf("benchmark for testdata/ada-res_1M_000perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/ada-res_1M_010perc.txt");
    printf("benchmark for testdata/ada-res_1M_010perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/ada-res_1M_025perc.txt");
    printf("benchmark for testdata/ada-res_1M_025perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/ada-res_1M_050perc.txt");
    printf("benchmark for testdata/ada-res_1M_050perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/ada-res_1M_075perc.txt");
    printf("benchmark for testdata/ada-res_1M_075perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_ada_res_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_ada_res_pext", repeat, testdata.size());
    }
}

void benchmark_adadefs(const Filter& filter) {
    if (!filter.dataset("adadefs")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/adadefs_1M_000perc.txt");
    printf("benchmark for testdata/adadefs_1M_000perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/adadefs_1M_010perc.txt");
    printf("benchmark for testdata/adadefs_1M_010perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/adadefs_1M_025perc.txt");
    printf("benchmark for testdata/adadefs_1M_025perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/adadefs_1M_050perc.txt");
    printf("benchmark for testdata/adadefs_1M_050perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/adadefs_1M_075perc.txt");
    printf("benchmark for testdata/adadefs_1M_075perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_adadefs_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_adadefs_hash_sdb", repeat, testdata.size());
    }
}

void benchmark_c(const Filter& filter) {
    if (!filter.dataset("c")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/c_1M_000perc.txt");
    printf("benchmark for testdata/c_1M_000perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/c_1M_010perc.txt");
    printf("benchmark for testdata/c_1M_010perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/c_1M_025perc.txt");
    printf("benchmark for testdata/c_1M_025perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/c_1M_050perc.txt");
    printf("benchmark for testdata/c_1M_050perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/c_1M_075perc.txt");
    printf("benchmark for testdata/c_1M_075perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_c_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_c_hash_sdb", repeat, testdata.size());
    }
}

void benchmark_countries(const Filter& filter) {
    if (!filter.dataset("countries")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/countries_1M_000perc.txt");
    printf("benchmark for testdata/countries_1M_000perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/countries_1M_010perc.txt");
    printf("benchmark for testdata/countries_1M_010perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/countries_1M_025perc.txt");
    printf("benchmark for testdata/countries_1M_025perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/countries_1M_050perc.txt");
    printf("benchmark for testdata/countries_1M_050perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/countries_1M_075perc.txt");
    printf("benchmark for testdata/countries_1M_075perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_countries_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_countries_hash_sdb", repeat, testdata.size());
    }
}

void benchmark_cplusplus(const Filter& filter) {
    if (!filter.dataset("cplusplus")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/cplusplus_1M_000perc.txt");
    printf("benchmark for testdata/cplusplus_1M_000perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/cplusplus_1M_010perc.txt");
    printf("benchmark for testdata/cplusplus_1M_010perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/cplusplus_1M_025perc.txt");
    printf("benchmark for testdata/cplusplus_1M_025perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/cplusplus_1M_050perc.txt");
    printf("benchmark for testdata/cplusplus_1M_050perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/cplusplus_1M_075perc.txt");
    printf("benchmark for testdata/cplusplus_1M_075perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cplusplus_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cplusplus_hash_sdb", repeat, testdata.size());
    }
}

void benchmark_cpp(const Filter& filter) {
    if (!filter.dataset("cpp")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/cpp_1M_000perc.txt");
    printf("benchmark for testdata/cpp_1M_000perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_split", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/cpp_1M_010perc.txt");
    printf("benchmark for testdata/cpp_1M_010perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_split", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/cpp_1M_025perc.txt");
    printf("benchmark for testdata/cpp_1M_025perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_split", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/cpp_1M_050perc.txt");
    printf("benchmark for testdata/cpp_1M_050perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_split", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/cpp_1M_075perc.txt");
    printf("benchmark for testdata/cpp_1M_075perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_cpp_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_cpp_split", repeat, testdata.size());
    }
}

void benchmark_go(const Filter& filter) {
    if (!filter.dataset("go")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/go_1M_000perc.txt");
    printf("benchmark for testdata/go_1M_000perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/go_1M_010perc.txt");
    printf("benchmark for testdata/go_1M_010perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/go_1M_025perc.txt");
    printf("benchmark for testdata/go_1M_025perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/go_1M_050perc.txt");
    printf("benchmark for testdata/go_1M_050perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/go_1M_075perc.txt");
    printf("benchmark for testdata/go_1M_075perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_go_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_go_hash_sdb", repeat, testdata.size());
    }
}

void benchmark_gpc(const Filter& filter) {
    if (!filter.dataset("gpc")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/gpc_1M_000perc.txt");
    printf("benchmark for testdata/gpc_1M_000perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/gpc_1M_010perc.txt");
    printf("benchmark for testdata/gpc_1M_010perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/gpc_1M_025perc.txt");
    printf("benchmark for testdata/gpc_1M_025perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/gpc_1M_050perc.txt");
    printf("benchmark for testdata/gpc_1M_050perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/gpc_1M_075perc.txt");
    printf("benchmark for testdata/gpc_1M_075perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_gpc_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_gpc_pext", repeat, testdata.size());
    }
}

void benchmark_irc(const Filter& filter) {
    if (!filter.dataset("irc")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/irc_1M_000perc.txt");
    printf("benchmark for testdata/irc_1M_000perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/irc_1M_010perc.txt");
    printf("benchmark for testdata/irc_1M_010perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/irc_1M_025perc.txt");
    printf("benchmark for testdata/irc_1M_025perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/irc_1M_050perc.txt");
    printf("benchmark for testdata/irc_1M_050perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/irc_1M_075perc.txt");
    printf("benchmark for testdata/irc_1M_075perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_irc_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_irc_pext", repeat, testdata.size());
    }
}

void benchmark_java(const Filter& filter) {
    if (!filter.dataset("java")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/java_1M_000perc.txt");
    printf("benchmark for testdata/java_1M_000perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/java_1M_010perc.txt");
    printf("benchmark for testdata/java_1M_010perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/java_1M_025perc.txt");
    printf("benchmark for testdata/java_1M_025perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/java_1M_050perc.txt");
    printf("benchmark for testdata/java_1M_050perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/java_1M_075perc.txt");
    printf("benchmark for testdata/java_1M_075perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_java_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_java_hash_sdb", repeat, testdata.size());
    }
}

void benchmark_jscript(const Filter& filter) {
    if (!filter.dataset("jscript")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/jscript_1M_000perc.txt");
    printf("benchmark for testdata/jscript_1M_000perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/jscript_1M_010perc.txt");
    printf("benchmark for testdata/jscript_1M_010perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/jscript_1M_025perc.txt");
    printf("benchmark for testdata/jscript_1M_025perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/jscript_1M_050perc.txt");
    printf("benchmark for testdata/jscript_1M_050perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/jscript_1M_075perc.txt");
    printf("benchmark for testdata/jscript_1M_075perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_jscript_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_jscript_hash_sdb", repeat, testdata.size());
    }
}

void benchmark_modula(const Filter& filter) {
    if (!filter.dataset("modula")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/modula_1M_000perc.txt");
    printf("benchmark for testdata/modula_1M_000perc.txt\n");
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/modula_1M_010perc.txt");
    printf("benchmark for testdata/modula_1M_010perc.txt\n");
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/modula_1M_025perc.txt");
    printf("benchmark for testdata/modula_1M_025perc.txt\n");
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/modula_1M_050perc.txt");
    printf("benchmark for testdata/modula_1M_050perc.txt\n");
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/modula_1M_075perc.txt");
    printf("benchmark for testdata/modula_1M_075perc.txt\n");
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_split", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula_pext", repeat, testdata.size());
    }
}

void benchmark_modula2(const Filter& filter) {
    if (!filter.dataset("modula2")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/modula2_1M_000perc.txt");
    printf("benchmark for testdata/modula2_1M_000perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/modula2_1M_010perc.txt");
    printf("benchmark for testdata/modula2_1M_010perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/modula2_1M_025perc.txt");
    printf("benchmark for testdata/modula2_1M_025perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/modula2_1M_050perc.txt");
    printf("benchmark for testdata/modula2_1M_050perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/modula2_1M_075perc.txt");
    printf("benchmark for testdata/modula2_1M_075perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula2_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula2_pext", repeat, testdata.size());
    }
}

void benchmark_modula3(const Filter& filter) {
    if (!filter.dataset("modula3")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/modula3_1M_000perc.txt");
    printf("benchmark for testdata/modula3_1M_000perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/modula3_1M_010perc.txt");
    printf("benchmark for testdata/modula3_1M_010perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/modula3_1M_025perc.txt");
    printf("benchmark for testdata/modula3_1M_025perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/modula3_1M_050perc.txt");
    printf("benchmark for testdata/modula3_1M_050perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/modula3_1M_075perc.txt");
    printf("benchmark for testdata/modula3_1M_075perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_modula3_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_modula3_hash_sdb", repeat, testdata.size());
    }
}

void benchmark_pascal(const Filter& filter) {
    if (!filter.dataset("pascal")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/pascal_1M_000perc.txt");
    printf("benchmark for testdata/pascal_1M_000perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/pascal_1M_010perc.txt");
    printf("benchmark for testdata/pascal_1M_010perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/pascal_1M_025perc.txt");
    printf("benchmark for testdata/pascal_1M_025perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/pascal_1M_050perc.txt");
    printf("benchmark for testdata/pascal_1M_050perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/pascal_1M_075perc.txt");
    printf("benchmark for testdata/pascal_1M_075perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_pascal_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_pascal_hash_sdb", repeat, testdata.size());
    }
}

void benchmark_sneller(const Filter& filter) {
    if (!filter.dataset("sneller")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/sneller_1M_000perc.txt");
    printf("benchmark for testdata/sneller_1M_000perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_split", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/sneller_1M_010perc.txt");
    printf("benchmark for testdata/sneller_1M_010perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_split", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/sneller_1M_025perc.txt");
    printf("benchmark for testdata/sneller_1M_025perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_split", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/sneller_1M_050perc.txt");
    printf("benchmark for testdata/sneller_1M_050perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_split", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/sneller_1M_075perc.txt");
    printf("benchmark for testdata/sneller_1M_075perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_pext", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_sneller_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_sneller_split", repeat, testdata.size());
    }
}

void benchmark_snellerbuiltin(const Filter& filter) {
    if (!filter.dataset("snellerbuiltin")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/snellerbuiltin_1M_000perc.txt");
    printf("benchmark for testdata/snellerbuiltin_1M_000perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/snellerbuiltin_1M_010perc.txt");
    printf("benchmark for testdata/snellerbuiltin_1M_010perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/snellerbuiltin_1M_025perc.txt");
    printf("benchmark for testdata/snellerbuiltin_1M_025perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/snellerbuiltin_1M_050perc.txt");
    printf("benchmark for testdata/snellerbuiltin_1M_050perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_pext", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/snellerbuiltin_1M_075perc.txt");
    printf("benchmark for testdata/snellerbuiltin_1M_075perc.txt\n");
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_hash_sdb", repeat, testdata.size());
    }
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_snellerbuiltin_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_snellerbuiltin_pext", repeat, testdata.size());
    }
}

void benchmark_states(const Filter& filter) {
    if (!filter.dataset("states")) {
        return;
    }
    testdata.clear();
    testdata = read_lines("testdata/states_1M_000perc.txt");
    printf("benchmark for testdata/states_1M_000perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/states_1M_010perc.txt");
    printf("benchmark for testdata/states_1M_010perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/states_1M_025perc.txt");
    printf("benchmark for testdata/states_1M_025perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/states_1M_050perc.txt");
    printf("benchmark for testdata/states_1M_050perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_sdb", repeat, testdata.size());
    }
    testdata.clear();
    testdata = read_lines("testdata/states_1M_075perc.txt");
    printf("benchmark for testdata/states_1M_075perc.txt\n");
    if (filter.type("pext")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_pext(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_pext", repeat, testdata.size());
    }
    if (filter.type("split")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_split(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_split", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash1(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash1", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash3(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash3", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_sum0(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_sum0", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_sumN(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_sumN", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_djb2(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_djb2", repeat, testdata.size());
    }
    if (filter.type("hash")) {
        auto fn = [](){
            for (const auto& s: testdata) {
                total += lookup_states_hash_sdb(s);
            }
        };
        BEST_TIME(/*pre*/, fn(), "lookup_states_hash_sdb", repeat, testdata.size());
    }
}

void benchmark(const Filter& filter) {
    benchmark_ada(filter);
    benchmark_ada_pred(filter);
    benchmark_ada_res(filter);
    benchmark_adadefs(filter);
    benchmark_c(filter);
    benchmark_countries(filter);
    benchmark_cplusplus(filter);
    benchmark_cpp(filter);
    benchmark_go(filter);
    benchmark_gpc(filter);
    benchmark_irc(filter);
    benchmark_java(filter);
    benchmark_jscript(filter);
    benchmark_modula(filter);
    benchmark_modula2(filter);
    benchmark_modula3(filter);
    benchmark_pascal(filter);
    benchmark_sneller(filter);
    benchmark_snellerbuiltin(filter);
    benchmark_states(filter);
}
